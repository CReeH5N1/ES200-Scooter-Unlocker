#include <Arduino.h>

/*
   -- This project is designed to test the different possible commands to send to the ES-200b Scooter. The command is only one byte so there are 255 possiblities.
   At the moment only three commands are known to work.  --


   This source code of graphical user interface
   has been generated automatically by RemoteXY editor.
   To compile this code using RemoteXY library 2.4.3 or later version
   download by link http://remotexy.com/en/library/
   To connect using RemoteXY mobile app by link http://remotexy.com/en/download/
     - for ANDROID 4.3.1 or later version;
     - for iOS 1.3.5 or later version;

   This source code is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.
*/

//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

// RemoteXY select connection mode and include library
#define REMOTEXY_MODE__ESP32CORE_BLE

#include "RemoteXY.h"

// RemoteXY connection settings
#define REMOTEXY_BLUETOOTH_NAME "Scooter Time"


// RemoteXY configurate
#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] =
  { 255,3,0,2,0,96,0,8,5,1,
  2,1,21,25,22,11,2,26,31,31,
  79,78,0,79,70,70,0,65,4,24,
  8,13,13,129,0,5,42,53,10,218,
  83,99,111,111,116,32,84,105,109,101,
  0,65,4,6,86,9,9,129,0,24,
  88,29,4,17,66,76,69,32,67,111,
  110,110,101,99,116,101,100,0,7,48,
  6,63,20,5,2,26,2,129,0,29,
  64,22,4,50,67,111,109,109,97,110,
  100,115,0 };

// this structure defines all the variables of your control interface
struct {

    // input variable
  uint8_t switch_1; // =1 if switch ON and =0 if OFF
  int16_t edit_1;  // âˆ’32767.. +32767

    // output variable
  uint8_t led_1_r; // =0..255 LED Red brightness
  uint8_t led_2_r; // =0..255 LED Red brightness

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;
#pragma pack(pop)

/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////

#define PIN_SWITCH_1 13

#define INTERVAL 1000
unsigned long start_time = 0;
int run_once = 0;

byte messageOff[] = {0xA6, 0x12, 0x02, 0x10, 0x14, 0xCF}; //If the scooter is on turn it off.
byte messageB[] = {0xA6, 0x12, 0x02, 0x11, 0x14, 0x0B}; //Not sure what this does?
byte messageStart[] = {0xA6, 0x12, 0x02, 0x15, 0x14, 0x30}; //This is the unlock code.

void setup()
{
  RemoteXY_Init ();

  Serial.begin(9600);
  Serial1.begin(9600);

  pinMode (PIN_SWITCH_1, OUTPUT);

  Serial1.write(messageOff, sizeof(messageOff));
  delay(500);
  Serial1.write(messageStart, sizeof(messageStart));

}

void loop()
{
  RemoteXY_Handler ();

  digitalWrite(PIN_SWITCH_1, (RemoteXY.switch_1==0)?LOW:HIGH);

  if(RemoteXY.connect_flag == 1){ //BLE connection indication for the smartphone;
    RemoteXY.led_2_r = 1;
  }
    else{
      RemoteXY.led_2_r = 0;
    }

  if(RemoteXY.switch_1 == 1){
    if(millis() > start_time + INTERVAL){ //This is the keep alive command.
        start_time = millis();
        Serial1.write(messageStart, sizeof(messageStart));
        run_once = 0;
      }
    RemoteXY.led_1_r = 255;
    }
    else{
      RemoteXY.led_1_r = 0;
      if (run_once == 0){
      Serial1.write(messageOff, sizeof(messageOff));
      run_once = 1;
      }
    }

   Serial.print(RemoteXY.switch_1);
   Serial.print(" ");
   Serial.print(RemoteXY.led_1_r);
   Serial.print(" ");
   Serial.println(RemoteXY.connect_flag);

}
